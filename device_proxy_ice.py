# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `device_proxy.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import DBEntity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Vistek
_M_Vistek = Ice.openModule('Vistek')

# Included module Vistek.Data
_M_Vistek.Data = Ice.openModule('Vistek.Data')

# Start of module Vistek
__name__ = 'Vistek'

# Start of module Vistek.Device
_M_Vistek.Device = Ice.openModule('Vistek.Device')
__name__ = 'Vistek.Device'

if 'RegisterType' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.RegisterType = Ice.createTempClass()
    class RegisterType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    RegisterType.rtNormal = RegisterType("rtNormal", 0)
    RegisterType.rtCheck = RegisterType("rtCheck", 1)
    RegisterType._enumerators = { 0:RegisterType.rtNormal, 1:RegisterType.rtCheck }

    _M_Vistek.Device._t_RegisterType = IcePy.defineEnum('::Vistek::Device::RegisterType', RegisterType, (), RegisterType._enumerators)

    _M_Vistek.Device.RegisterType = RegisterType
    del RegisterType

if 'DeviceStreamInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceStreamInfo = Ice.createTempClass()
    class DeviceStreamInfo(Ice.Object):
        def __init__(self, deviceID='', uri='', channel=0, stream=0):
            self.deviceID = deviceID
            self.uri = uri
            self.channel = channel
            self.stream = stream

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceStreamInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceStreamInfo'

        def ice_staticId():
            return '::Vistek::Device::DeviceStreamInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceStreamInfo)

        __repr__ = __str__

    _M_Vistek.Device.DeviceStreamInfoPrx = Ice.createTempClass()
    class DeviceStreamInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceStreamInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceStreamInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceStreamInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceStreamInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceStreamInfoPrx = IcePy.defineProxy('::Vistek::Device::DeviceStreamInfo', DeviceStreamInfoPrx)

    _M_Vistek.Device._t_DeviceStreamInfo = IcePy.defineClass('::Vistek::Device::DeviceStreamInfo', DeviceStreamInfo, -1, (), False, False, None, (), (
        ('deviceID', (), IcePy._t_string, False, 0),
        ('uri', (), IcePy._t_string, False, 0),
        ('channel', (), IcePy._t_int, False, 0),
        ('stream', (), IcePy._t_int, False, 0)
    ))
    DeviceStreamInfo._ice_type = _M_Vistek.Device._t_DeviceStreamInfo

    _M_Vistek.Device.DeviceStreamInfo = DeviceStreamInfo
    del DeviceStreamInfo

    _M_Vistek.Device.DeviceStreamInfoPrx = DeviceStreamInfoPrx
    del DeviceStreamInfoPrx

if '_t_DeviceStreamInfoList' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device._t_DeviceStreamInfoList = IcePy.defineSequence('::Vistek::Device::DeviceStreamInfoList', (), _M_Vistek.Device._t_DeviceStreamInfo)

if 'DeviceChannelInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceChannelInfo = Ice.createTempClass()
    class DeviceChannelInfo(Ice.Object):
        def __init__(self, deviceID='', username='', password='', streamList=None, channel=0, thirdparty=False):
            self.deviceID = deviceID
            self.username = username
            self.password = password
            self.streamList = streamList
            self.channel = channel
            self.thirdparty = thirdparty

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceChannelInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceChannelInfo'

        def ice_staticId():
            return '::Vistek::Device::DeviceChannelInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceChannelInfo)

        __repr__ = __str__

    _M_Vistek.Device.DeviceChannelInfoPrx = Ice.createTempClass()
    class DeviceChannelInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceChannelInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceChannelInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceChannelInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceChannelInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceChannelInfoPrx = IcePy.defineProxy('::Vistek::Device::DeviceChannelInfo', DeviceChannelInfoPrx)

    _M_Vistek.Device._t_DeviceChannelInfo = IcePy.declareClass('::Vistek::Device::DeviceChannelInfo')

    _M_Vistek.Device._t_DeviceChannelInfo = IcePy.defineClass('::Vistek::Device::DeviceChannelInfo', DeviceChannelInfo, -1, (), False, False, None, (), (
        ('deviceID', (), IcePy._t_string, False, 0),
        ('username', (), IcePy._t_string, False, 0),
        ('password', (), IcePy._t_string, False, 0),
        ('streamList', (), _M_Vistek.Device._t_DeviceStreamInfoList, False, 0),
        ('channel', (), IcePy._t_int, False, 0),
        ('thirdparty', (), IcePy._t_bool, False, 0)
    ))
    DeviceChannelInfo._ice_type = _M_Vistek.Device._t_DeviceChannelInfo

    _M_Vistek.Device.DeviceChannelInfo = DeviceChannelInfo
    del DeviceChannelInfo

    _M_Vistek.Device.DeviceChannelInfoPrx = DeviceChannelInfoPrx
    del DeviceChannelInfoPrx

if '_t_DeviceChannelInfoList' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device._t_DeviceChannelInfoList = IcePy.defineSequence('::Vistek::Device::DeviceChannelInfoList', (), _M_Vistek.Device._t_DeviceChannelInfo)

if 'DeviceCallback' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceCallback = Ice.createTempClass()
    class DeviceCallback(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.DeviceCallback:
                raise RuntimeError('Vistek.Device.DeviceCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceCallback')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceCallback'

        def ice_staticId():
            return '::Vistek::Device::DeviceCallback'
        ice_staticId = staticmethod(ice_staticId)

        def DeviceChangedNotify(self, device, changetype, current=None):
            pass

        def DeviceVideoChannelChangedNotify(self, channel, changetype, current=None):
            pass

        def MessageReceived(self, msg, current=None):
            pass

        def DuplexMessageReceived(self, msg, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceCallback)

        __repr__ = __str__

    _M_Vistek.Device.DeviceCallbackPrx = Ice.createTempClass()
    class DeviceCallbackPrx(Ice.ObjectPrx):

        def DeviceChangedNotify(self, device, changetype, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DeviceChangedNotify.invoke(self, ((device, changetype), _ctx))

        def begin_DeviceChangedNotify(self, device, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DeviceChangedNotify.begin(self, ((device, changetype), _response, _ex, _sent, _ctx))

        def end_DeviceChangedNotify(self, _r):
            return _M_Vistek.Device.DeviceCallback._op_DeviceChangedNotify.end(self, _r)

        def DeviceVideoChannelChangedNotify(self, channel, changetype, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DeviceVideoChannelChangedNotify.invoke(self, ((channel, changetype), _ctx))

        def begin_DeviceVideoChannelChangedNotify(self, channel, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DeviceVideoChannelChangedNotify.begin(self, ((channel, changetype), _response, _ex, _sent, _ctx))

        def end_DeviceVideoChannelChangedNotify(self, _r):
            return _M_Vistek.Device.DeviceCallback._op_DeviceVideoChannelChangedNotify.end(self, _r)

        def MessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_MessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_MessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_MessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_MessageReceived(self, _r):
            return _M_Vistek.Device.DeviceCallback._op_MessageReceived.end(self, _r)

        def DuplexMessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DuplexMessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_DuplexMessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceCallback._op_DuplexMessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_DuplexMessageReceived(self, _r):
            return _M_Vistek.Device.DeviceCallback._op_DuplexMessageReceived.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceCallbackPrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceCallback'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceCallbackPrx = IcePy.defineProxy('::Vistek::Device::DeviceCallback', DeviceCallbackPrx)

    _M_Vistek.Device._t_DeviceCallback = IcePy.defineClass('::Vistek::Device::DeviceCallback', DeviceCallback, -1, (), True, False, None, (), ())
    DeviceCallback._ice_type = _M_Vistek.Device._t_DeviceCallback

    DeviceCallback._op_DeviceChangedNotify = IcePy.Operation('DeviceChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDevice, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DeviceCallback._op_DeviceVideoChannelChangedNotify = IcePy.Operation('DeviceVideoChannelChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDeviceVideoChannel, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DeviceCallback._op_MessageReceived = IcePy.Operation('MessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), None, ())
    DeviceCallback._op_DuplexMessageReceived = IcePy.Operation('DuplexMessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), ((), _M_Vistek.Data._t_ServiceMessage, False, 0), ())

    _M_Vistek.Device.DeviceCallback = DeviceCallback
    del DeviceCallback

    _M_Vistek.Device.DeviceCallbackPrx = DeviceCallbackPrx
    del DeviceCallbackPrx

if 'DeviceDispatchSession' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceDispatchSession = Ice.createTempClass()
    class DeviceDispatchSession(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.DeviceDispatchSession:
                raise RuntimeError('Vistek.Device.DeviceDispatchSession is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceDispatchSession')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceDispatchSession'

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchSession'
        ice_staticId = staticmethod(ice_staticId)

        def GetID(self, current=None):
            pass

        def KeepAlive(self, current=None):
            pass

        def Destroy(self, current=None):
            pass

        def GetDeviceList(self, current=None):
            pass

        def UpdateDeviceList(self, list, current=None):
            pass

        def PushDeviceStatus(self, info, current=None):
            pass

        def PushDeviceStatusList(self, list, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceDispatchSession)

        __repr__ = __str__

    _M_Vistek.Device.DeviceDispatchSessionPrx = Ice.createTempClass()
    class DeviceDispatchSessionPrx(Ice.ObjectPrx):

        def GetID(self, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetID.invoke(self, ((), _ctx))

        def begin_GetID(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetID.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetID(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetID.end(self, _r)

        def KeepAlive(self, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_KeepAlive.invoke(self, ((), _ctx))

        def begin_KeepAlive(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_KeepAlive.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_KeepAlive(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_KeepAlive.end(self, _r)

        def Destroy(self, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_Destroy.invoke(self, ((), _ctx))

        def begin_Destroy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_Destroy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Destroy(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_Destroy.end(self, _r)

        def GetDeviceList(self, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetDeviceList.invoke(self, ((), _ctx))

        def begin_GetDeviceList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetDeviceList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetDeviceList(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_GetDeviceList.end(self, _r)

        def UpdateDeviceList(self, list, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_UpdateDeviceList.invoke(self, ((list, ), _ctx))

        def begin_UpdateDeviceList(self, list, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_UpdateDeviceList.begin(self, ((list, ), _response, _ex, _sent, _ctx))

        def end_UpdateDeviceList(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_UpdateDeviceList.end(self, _r)

        def PushDeviceStatus(self, info, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatus.invoke(self, ((info, ), _ctx))

        def begin_PushDeviceStatus(self, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatus.begin(self, ((info, ), _response, _ex, _sent, _ctx))

        def end_PushDeviceStatus(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatus.end(self, _r)

        def PushDeviceStatusList(self, list, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatusList.invoke(self, ((list, ), _ctx))

        def begin_PushDeviceStatusList(self, list, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatusList.begin(self, ((list, ), _response, _ex, _sent, _ctx))

        def end_PushDeviceStatusList(self, _r):
            return _M_Vistek.Device.DeviceDispatchSession._op_PushDeviceStatusList.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchSessionPrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceDispatchSession', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceDispatchSessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchSession'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceDispatchSessionPrx = IcePy.defineProxy('::Vistek::Device::DeviceDispatchSession', DeviceDispatchSessionPrx)

    _M_Vistek.Device._t_DeviceDispatchSession = IcePy.defineClass('::Vistek::Device::DeviceDispatchSession', DeviceDispatchSession, -1, (), True, False, None, (), ())
    DeviceDispatchSession._ice_type = _M_Vistek.Device._t_DeviceDispatchSession

    DeviceDispatchSession._op_GetID = IcePy.Operation('GetID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    DeviceDispatchSession._op_KeepAlive = IcePy.Operation('KeepAlive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    DeviceDispatchSession._op_Destroy = IcePy.Operation('Destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    DeviceDispatchSession._op_GetDeviceList = IcePy.Operation('GetDeviceList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmDeviceList, False, 0), ())
    DeviceDispatchSession._op_UpdateDeviceList = IcePy.Operation('UpdateDeviceList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDeviceList, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DeviceDispatchSession._op_PushDeviceStatus = IcePy.Operation('PushDeviceStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfo, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DeviceDispatchSession._op_PushDeviceStatusList = IcePy.Operation('PushDeviceStatusList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfoList, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Vistek.Device.DeviceDispatchSession = DeviceDispatchSession
    del DeviceDispatchSession

    _M_Vistek.Device.DeviceDispatchSessionPrx = DeviceDispatchSessionPrx
    del DeviceDispatchSessionPrx

if 'DeviceDispatchService' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceDispatchService = Ice.createTempClass()
    class DeviceDispatchService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.DeviceDispatchService:
                raise RuntimeError('Vistek.Device.DeviceDispatchService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceDispatchService')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceDispatchService'

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchService'
        ice_staticId = staticmethod(ice_staticId)

        def Register(self, id, rt, current=None):
            pass

        def register2(self, id, manuc, current=None):
            pass

        def Unregister(self, id, current=None):
            pass

        def PushDeviceStreamInfos(self, infoMap, current=None):
            pass

        def PushDeviceStreamInfo(self, info, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceDispatchService)

        __repr__ = __str__

    _M_Vistek.Device.DeviceDispatchServicePrx = Ice.createTempClass()
    class DeviceDispatchServicePrx(Ice.ObjectPrx):

        def Register(self, id, rt, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_Register.invoke(self, ((id, rt), _ctx))

        def begin_Register(self, id, rt, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_Register.begin(self, ((id, rt), _response, _ex, _sent, _ctx))

        def end_Register(self, _r):
            return _M_Vistek.Device.DeviceDispatchService._op_Register.end(self, _r)

        def register2(self, id, manuc, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_register2.invoke(self, ((id, manuc), _ctx))

        def begin_register2(self, id, manuc, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_register2.begin(self, ((id, manuc), _response, _ex, _sent, _ctx))

        def end_register2(self, _r):
            return _M_Vistek.Device.DeviceDispatchService._op_register2.end(self, _r)

        def Unregister(self, id, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_Unregister.invoke(self, ((id, ), _ctx))

        def begin_Unregister(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_Unregister.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_Unregister(self, _r):
            return _M_Vistek.Device.DeviceDispatchService._op_Unregister.end(self, _r)

        def PushDeviceStreamInfos(self, infoMap, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfos.invoke(self, ((infoMap, ), _ctx))

        def begin_PushDeviceStreamInfos(self, infoMap, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfos.begin(self, ((infoMap, ), _response, _ex, _sent, _ctx))

        def end_PushDeviceStreamInfos(self, _r):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfos.end(self, _r)

        def PushDeviceStreamInfo(self, info, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfo.invoke(self, ((info, ), _ctx))

        def begin_PushDeviceStreamInfo(self, info, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfo.begin(self, ((info, ), _response, _ex, _sent, _ctx))

        def end_PushDeviceStreamInfo(self, _r):
            return _M_Vistek.Device.DeviceDispatchService._op_PushDeviceStreamInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchServicePrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceDispatchService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceDispatchServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceDispatchServicePrx = IcePy.defineProxy('::Vistek::Device::DeviceDispatchService', DeviceDispatchServicePrx)

    _M_Vistek.Device._t_DeviceDispatchService = IcePy.defineClass('::Vistek::Device::DeviceDispatchService', DeviceDispatchService, -1, (), True, False, None, (), ())
    DeviceDispatchService._ice_type = _M_Vistek.Device._t_DeviceDispatchService

    DeviceDispatchService._op_Register = IcePy.Operation('Register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Vistek.Device._t_RegisterType, False, 0)), (), ((), _M_Vistek.Device._t_DeviceDispatchSessionPrx, False, 0), ())
    DeviceDispatchService._op_register2 = IcePy.Operation('register2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Vistek.Device._t_DeviceDispatchSessionPrx, False, 0), ())
    DeviceDispatchService._op_Unregister = IcePy.Operation('Unregister', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DeviceDispatchService._op_PushDeviceStreamInfos = IcePy.Operation('PushDeviceStreamInfos', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Device._t_DeviceChannelInfoList, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DeviceDispatchService._op_PushDeviceStreamInfo = IcePy.Operation('PushDeviceStreamInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Device._t_DeviceChannelInfo, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Vistek.Device.DeviceDispatchService = DeviceDispatchService
    del DeviceDispatchService

    _M_Vistek.Device.DeviceDispatchServicePrx = DeviceDispatchServicePrx
    del DeviceDispatchServicePrx

if 'DeviceDispatchServiceV1' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceDispatchServiceV1 = Ice.createTempClass()
    class DeviceDispatchServiceV1(_M_Vistek.Device.DeviceDispatchService):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.DeviceDispatchServiceV1:
                raise RuntimeError('Vistek.Device.DeviceDispatchServiceV1 is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceDispatchService', '::Vistek::Device::DeviceDispatchServiceV1')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceDispatchServiceV1'

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchServiceV1'
        ice_staticId = staticmethod(ice_staticId)

        def SubscribeCallback(self, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceDispatchServiceV1)

        __repr__ = __str__

    _M_Vistek.Device.DeviceDispatchServiceV1Prx = Ice.createTempClass()
    class DeviceDispatchServiceV1Prx(_M_Vistek.Device.DeviceDispatchServicePrx):

        def SubscribeCallback(self, ident, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchServiceV1._op_SubscribeCallback.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeCallback(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchServiceV1._op_SubscribeCallback.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeCallback(self, _r):
            return _M_Vistek.Device.DeviceDispatchServiceV1._op_SubscribeCallback.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceDispatchServiceV1Prx.ice_checkedCast(proxy, '::Vistek::Device::DeviceDispatchServiceV1', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceDispatchServiceV1Prx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceDispatchServiceV1'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceDispatchServiceV1Prx = IcePy.defineProxy('::Vistek::Device::DeviceDispatchServiceV1', DeviceDispatchServiceV1Prx)

    _M_Vistek.Device._t_DeviceDispatchServiceV1 = IcePy.defineClass('::Vistek::Device::DeviceDispatchServiceV1', DeviceDispatchServiceV1, -1, (), True, False, None, (_M_Vistek.Device._t_DeviceDispatchService,), ())
    DeviceDispatchServiceV1._ice_type = _M_Vistek.Device._t_DeviceDispatchServiceV1

    DeviceDispatchServiceV1._op_SubscribeCallback = IcePy.Operation('SubscribeCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())

    _M_Vistek.Device.DeviceDispatchServiceV1 = DeviceDispatchServiceV1
    del DeviceDispatchServiceV1

    _M_Vistek.Device.DeviceDispatchServiceV1Prx = DeviceDispatchServiceV1Prx
    del DeviceDispatchServiceV1Prx

# End of module Vistek.Device

__name__ = 'Vistek'

# End of module Vistek

# Start of module Vistek
__name__ = 'Vistek'

# Start of module Vistek.Media
_M_Vistek.Media = Ice.openModule('Vistek.Media')
__name__ = 'Vistek.Media'

if 'ServiceType' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.ServiceType = Ice.createTempClass()
    class ServiceType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ServiceType.stRtsp = ServiceType("stRtsp", 1)
    ServiceType.stRtmp = ServiceType("stRtmp", 2)
    ServiceType.stOther = ServiceType("stOther", 4)
    ServiceType._enumerators = { 1:ServiceType.stRtsp, 2:ServiceType.stRtmp, 4:ServiceType.stOther }

    _M_Vistek.Media._t_ServiceType = IcePy.defineEnum('::Vistek::Media::ServiceType', ServiceType, (), ServiceType._enumerators)

    _M_Vistek.Media.ServiceType = ServiceType
    del ServiceType

if '_t_ProtocolPortMap' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media._t_ProtocolPortMap = IcePy.defineDictionary('::Vistek::Media::ProtocolPortMap', (), IcePy._t_string, IcePy._t_int)

if '_t_UriMap' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media._t_UriMap = IcePy.defineDictionary('::Vistek::Media::UriMap', (), IcePy._t_string, IcePy._t_string)

if 'MediaCallback' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaCallback = Ice.createTempClass()
    class MediaCallback(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaCallback:
                raise RuntimeError('Vistek.Media.MediaCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaCallback')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaCallback'

        def ice_staticId():
            return '::Vistek::Media::MediaCallback'
        ice_staticId = staticmethod(ice_staticId)

        def MediaChangeNotify(self, did, type, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaCallback)

        __repr__ = __str__

    _M_Vistek.Media.MediaCallbackPrx = Ice.createTempClass()
    class MediaCallbackPrx(Ice.ObjectPrx):

        def MediaChangeNotify(self, did, type, _ctx=None):
            return _M_Vistek.Media.MediaCallback._op_MediaChangeNotify.invoke(self, ((did, type), _ctx))

        def begin_MediaChangeNotify(self, did, type, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaCallback._op_MediaChangeNotify.begin(self, ((did, type), _response, _ex, _sent, _ctx))

        def end_MediaChangeNotify(self, _r):
            return _M_Vistek.Media.MediaCallback._op_MediaChangeNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaCallbackPrx.ice_checkedCast(proxy, '::Vistek::Media::MediaCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaCallback'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaCallbackPrx = IcePy.defineProxy('::Vistek::Media::MediaCallback', MediaCallbackPrx)

    _M_Vistek.Media._t_MediaCallback = IcePy.defineClass('::Vistek::Media::MediaCallback', MediaCallback, -1, (), True, False, None, (), ())
    MediaCallback._ice_type = _M_Vistek.Media._t_MediaCallback

    MediaCallback._op_MediaChangeNotify = IcePy.Operation('MediaChangeNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())

    _M_Vistek.Media.MediaCallback = MediaCallback
    del MediaCallback

    _M_Vistek.Media.MediaCallbackPrx = MediaCallbackPrx
    del MediaCallbackPrx

if 'MediaDispatchSession' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaDispatchSession = Ice.createTempClass()
    class MediaDispatchSession(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaDispatchSession:
                raise RuntimeError('Vistek.Media.MediaDispatchSession is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaDispatchSession')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaDispatchSession'

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchSession'
        ice_staticId = staticmethod(ice_staticId)

        def GetID(self, current=None):
            pass

        def KeepAlive(self, current=None):
            pass

        def Destroy(self, current=None):
            pass

        def GetAllDeviceUri(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaDispatchSession)

        __repr__ = __str__

    _M_Vistek.Media.MediaDispatchSessionPrx = Ice.createTempClass()
    class MediaDispatchSessionPrx(Ice.ObjectPrx):

        def GetID(self, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_GetID.invoke(self, ((), _ctx))

        def begin_GetID(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_GetID.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetID(self, _r):
            return _M_Vistek.Media.MediaDispatchSession._op_GetID.end(self, _r)

        def KeepAlive(self, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_KeepAlive.invoke(self, ((), _ctx))

        def begin_KeepAlive(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_KeepAlive.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_KeepAlive(self, _r):
            return _M_Vistek.Media.MediaDispatchSession._op_KeepAlive.end(self, _r)

        def Destroy(self, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_Destroy.invoke(self, ((), _ctx))

        def begin_Destroy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_Destroy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_Destroy(self, _r):
            return _M_Vistek.Media.MediaDispatchSession._op_Destroy.end(self, _r)

        def GetAllDeviceUri(self, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_GetAllDeviceUri.invoke(self, ((), _ctx))

        def begin_GetAllDeviceUri(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSession._op_GetAllDeviceUri.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllDeviceUri(self, _r):
            return _M_Vistek.Media.MediaDispatchSession._op_GetAllDeviceUri.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchSessionPrx.ice_checkedCast(proxy, '::Vistek::Media::MediaDispatchSession', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaDispatchSessionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchSession'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaDispatchSessionPrx = IcePy.defineProxy('::Vistek::Media::MediaDispatchSession', MediaDispatchSessionPrx)

    _M_Vistek.Media._t_MediaDispatchSession = IcePy.defineClass('::Vistek::Media::MediaDispatchSession', MediaDispatchSession, -1, (), True, False, None, (), ())
    MediaDispatchSession._ice_type = _M_Vistek.Media._t_MediaDispatchSession

    MediaDispatchSession._op_GetID = IcePy.Operation('GetID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    MediaDispatchSession._op_KeepAlive = IcePy.Operation('KeepAlive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MediaDispatchSession._op_Destroy = IcePy.Operation('Destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    MediaDispatchSession._op_GetAllDeviceUri = IcePy.Operation('GetAllDeviceUri', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Media._t_UriMap, False, 0), ())

    _M_Vistek.Media.MediaDispatchSession = MediaDispatchSession
    del MediaDispatchSession

    _M_Vistek.Media.MediaDispatchSessionPrx = MediaDispatchSessionPrx
    del MediaDispatchSessionPrx

if 'MediaDispatchService' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaDispatchService = Ice.createTempClass()
    class MediaDispatchService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaDispatchService:
                raise RuntimeError('Vistek.Media.MediaDispatchService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaDispatchService')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaDispatchService'

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchService'
        ice_staticId = staticmethod(ice_staticId)

        def Login(self, id, st, host, ports, current=None):
            pass

        def Logout(self, id, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaDispatchService)

        __repr__ = __str__

    _M_Vistek.Media.MediaDispatchServicePrx = Ice.createTempClass()
    class MediaDispatchServicePrx(Ice.ObjectPrx):

        def Login(self, id, st, host, ports, _ctx=None):
            return _M_Vistek.Media.MediaDispatchService._op_Login.invoke(self, ((id, st, host, ports), _ctx))

        def begin_Login(self, id, st, host, ports, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchService._op_Login.begin(self, ((id, st, host, ports), _response, _ex, _sent, _ctx))

        def end_Login(self, _r):
            return _M_Vistek.Media.MediaDispatchService._op_Login.end(self, _r)

        def Logout(self, id, _ctx=None):
            return _M_Vistek.Media.MediaDispatchService._op_Logout.invoke(self, ((id, ), _ctx))

        def begin_Logout(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchService._op_Logout.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_Logout(self, _r):
            return _M_Vistek.Media.MediaDispatchService._op_Logout.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchServicePrx.ice_checkedCast(proxy, '::Vistek::Media::MediaDispatchService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaDispatchServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaDispatchServicePrx = IcePy.defineProxy('::Vistek::Media::MediaDispatchService', MediaDispatchServicePrx)

    _M_Vistek.Media._t_MediaDispatchService = IcePy.defineClass('::Vistek::Media::MediaDispatchService', MediaDispatchService, -1, (), True, False, None, (), ())
    MediaDispatchService._ice_type = _M_Vistek.Media._t_MediaDispatchService

    MediaDispatchService._op_Login = IcePy.Operation('Login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Vistek.Media._t_ProtocolPortMap, False, 0)), (), ((), _M_Vistek.Media._t_MediaDispatchSessionPrx, False, 0), ())
    MediaDispatchService._op_Logout = IcePy.Operation('Logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_int, False, 0), ())

    _M_Vistek.Media.MediaDispatchService = MediaDispatchService
    del MediaDispatchService

    _M_Vistek.Media.MediaDispatchServicePrx = MediaDispatchServicePrx
    del MediaDispatchServicePrx

if 'MediaDispatchServiceV1' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaDispatchServiceV1 = Ice.createTempClass()
    class MediaDispatchServiceV1(_M_Vistek.Media.MediaDispatchService):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaDispatchServiceV1:
                raise RuntimeError('Vistek.Media.MediaDispatchServiceV1 is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaDispatchService', '::Vistek::Media::MediaDispatchServiceV1')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaDispatchServiceV1'

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchServiceV1'
        ice_staticId = staticmethod(ice_staticId)

        def SubscribeCallback(self, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaDispatchServiceV1)

        __repr__ = __str__

    _M_Vistek.Media.MediaDispatchServiceV1Prx = Ice.createTempClass()
    class MediaDispatchServiceV1Prx(_M_Vistek.Media.MediaDispatchServicePrx):

        def SubscribeCallback(self, ident, _ctx=None):
            return _M_Vistek.Media.MediaDispatchServiceV1._op_SubscribeCallback.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeCallback(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchServiceV1._op_SubscribeCallback.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeCallback(self, _r):
            return _M_Vistek.Media.MediaDispatchServiceV1._op_SubscribeCallback.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaDispatchServiceV1Prx.ice_checkedCast(proxy, '::Vistek::Media::MediaDispatchServiceV1', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaDispatchServiceV1Prx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaDispatchServiceV1'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaDispatchServiceV1Prx = IcePy.defineProxy('::Vistek::Media::MediaDispatchServiceV1', MediaDispatchServiceV1Prx)

    _M_Vistek.Media._t_MediaDispatchServiceV1 = IcePy.defineClass('::Vistek::Media::MediaDispatchServiceV1', MediaDispatchServiceV1, -1, (), True, False, None, (_M_Vistek.Media._t_MediaDispatchService,), ())
    MediaDispatchServiceV1._ice_type = _M_Vistek.Media._t_MediaDispatchServiceV1

    MediaDispatchServiceV1._op_SubscribeCallback = IcePy.Operation('SubscribeCallback', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())

    _M_Vistek.Media.MediaDispatchServiceV1 = MediaDispatchServiceV1
    del MediaDispatchServiceV1

    _M_Vistek.Media.MediaDispatchServiceV1Prx = MediaDispatchServiceV1Prx
    del MediaDispatchServiceV1Prx

if 'MediaLocateService' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaLocateService = Ice.createTempClass()
    class MediaLocateService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaLocateService:
                raise RuntimeError('Vistek.Media.MediaLocateService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaLocateService')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaLocateService'

        def ice_staticId():
            return '::Vistek::Media::MediaLocateService'
        ice_staticId = staticmethod(ice_staticId)

        def GetMediaServiceUriV0(self, key, st, current=None):
            pass

        def GetMediaServiceUriV1(self, did, cid, sid, st, current=None):
            pass

        def GetAllMediaServiceUri(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaLocateService)

        __repr__ = __str__

    _M_Vistek.Media.MediaLocateServicePrx = Ice.createTempClass()
    class MediaLocateServicePrx(Ice.ObjectPrx):

        def GetMediaServiceUriV0(self, key, st, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV0.invoke(self, ((key, st), _ctx))

        def begin_GetMediaServiceUriV0(self, key, st, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV0.begin(self, ((key, st), _response, _ex, _sent, _ctx))

        def end_GetMediaServiceUriV0(self, _r):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV0.end(self, _r)

        def GetMediaServiceUriV1(self, did, cid, sid, st, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV1.invoke(self, ((did, cid, sid, st), _ctx))

        def begin_GetMediaServiceUriV1(self, did, cid, sid, st, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV1.begin(self, ((did, cid, sid, st), _response, _ex, _sent, _ctx))

        def end_GetMediaServiceUriV1(self, _r):
            return _M_Vistek.Media.MediaLocateService._op_GetMediaServiceUriV1.end(self, _r)

        def GetAllMediaServiceUri(self, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetAllMediaServiceUri.invoke(self, ((), _ctx))

        def begin_GetAllMediaServiceUri(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateService._op_GetAllMediaServiceUri.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllMediaServiceUri(self, _r):
            return _M_Vistek.Media.MediaLocateService._op_GetAllMediaServiceUri.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateServicePrx.ice_checkedCast(proxy, '::Vistek::Media::MediaLocateService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaLocateServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaLocateService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaLocateServicePrx = IcePy.defineProxy('::Vistek::Media::MediaLocateService', MediaLocateServicePrx)

    _M_Vistek.Media._t_MediaLocateService = IcePy.defineClass('::Vistek::Media::MediaLocateService', MediaLocateService, -1, (), True, False, None, (), ())
    MediaLocateService._ice_type = _M_Vistek.Media._t_MediaLocateService

    MediaLocateService._op_GetMediaServiceUriV0 = IcePy.Operation('GetMediaServiceUriV0', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Vistek.Media._t_ServiceType, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    MediaLocateService._op_GetMediaServiceUriV1 = IcePy.Operation('GetMediaServiceUriV1', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Vistek.Media._t_ServiceType, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    MediaLocateService._op_GetAllMediaServiceUri = IcePy.Operation('GetAllMediaServiceUri', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Media._t_UriMap, False, 0), ())

    _M_Vistek.Media.MediaLocateService = MediaLocateService
    del MediaLocateService

    _M_Vistek.Media.MediaLocateServicePrx = MediaLocateServicePrx
    del MediaLocateServicePrx

if 'MediaLocateServiceFactory' not in _M_Vistek.Media.__dict__:
    _M_Vistek.Media.MediaLocateServiceFactory = Ice.createTempClass()
    class MediaLocateServiceFactory(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Media.MediaLocateServiceFactory:
                raise RuntimeError('Vistek.Media.MediaLocateServiceFactory is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Media::MediaLocateServiceFactory')

        def ice_id(self, current=None):
            return '::Vistek::Media::MediaLocateServiceFactory'

        def ice_staticId():
            return '::Vistek::Media::MediaLocateServiceFactory'
        ice_staticId = staticmethod(ice_staticId)

        def Login(self, username, password, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Media._t_MediaLocateServiceFactory)

        __repr__ = __str__

    _M_Vistek.Media.MediaLocateServiceFactoryPrx = Ice.createTempClass()
    class MediaLocateServiceFactoryPrx(Ice.ObjectPrx):

        def Login(self, username, password, _ctx=None):
            return _M_Vistek.Media.MediaLocateServiceFactory._op_Login.invoke(self, ((username, password), _ctx))

        def begin_Login(self, username, password, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateServiceFactory._op_Login.begin(self, ((username, password), _response, _ex, _sent, _ctx))

        def end_Login(self, _r):
            return _M_Vistek.Media.MediaLocateServiceFactory._op_Login.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Media.MediaLocateServiceFactoryPrx.ice_checkedCast(proxy, '::Vistek::Media::MediaLocateServiceFactory', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Media.MediaLocateServiceFactoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Media::MediaLocateServiceFactory'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Media._t_MediaLocateServiceFactoryPrx = IcePy.defineProxy('::Vistek::Media::MediaLocateServiceFactory', MediaLocateServiceFactoryPrx)

    _M_Vistek.Media._t_MediaLocateServiceFactory = IcePy.defineClass('::Vistek::Media::MediaLocateServiceFactory', MediaLocateServiceFactory, -1, (), True, False, None, (), ())
    MediaLocateServiceFactory._ice_type = _M_Vistek.Media._t_MediaLocateServiceFactory

    MediaLocateServiceFactory._op_Login = IcePy.Operation('Login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Vistek.Media._t_MediaLocateServicePrx, False, 0), ())

    _M_Vistek.Media.MediaLocateServiceFactory = MediaLocateServiceFactory
    del MediaLocateServiceFactory

    _M_Vistek.Media.MediaLocateServiceFactoryPrx = MediaLocateServiceFactoryPrx
    del MediaLocateServiceFactoryPrx

# End of module Vistek.Media

__name__ = 'Vistek'

# End of module Vistek
