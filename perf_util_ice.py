# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `perf_util.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Vistek
_M_Vistek = Ice.openModule('Vistek')
__name__ = 'Vistek'

# Start of module Vistek.Perf
_M_Vistek.Perf = Ice.openModule('Vistek.Perf')
__name__ = 'Vistek.Perf'

if 'ResponseStringType' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.ResponseStringType = Ice.createTempClass()
    class ResponseStringType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ResponseStringType.rstXml = ResponseStringType("rstXml", 0)
    ResponseStringType.rstJson = ResponseStringType("rstJson", 1)
    ResponseStringType._enumerators = { 0:ResponseStringType.rstXml, 1:ResponseStringType.rstJson }

    _M_Vistek.Perf._t_ResponseStringType = IcePy.defineEnum('::Vistek::Perf::ResponseStringType', ResponseStringType, (), ResponseStringType._enumerators)

    _M_Vistek.Perf.ResponseStringType = ResponseStringType
    del ResponseStringType

if 'ObjectTrack' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.ObjectTrack = Ice.createTempClass()
    class ObjectTrack(Ice.Object):
        def __init__(self, ClassName=''):
            self.ClassName = ClassName

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::ObjectTrack')

        def ice_id(self, current=None):
            return '::Vistek::Perf::ObjectTrack'

        def ice_staticId():
            return '::Vistek::Perf::ObjectTrack'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_ObjectTrack)

        __repr__ = __str__

    _M_Vistek.Perf.ObjectTrackPrx = Ice.createTempClass()
    class ObjectTrackPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.ObjectTrackPrx.ice_checkedCast(proxy, '::Vistek::Perf::ObjectTrack', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.ObjectTrackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::ObjectTrack'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_ObjectTrackPrx = IcePy.defineProxy('::Vistek::Perf::ObjectTrack', ObjectTrackPrx)

    _M_Vistek.Perf._t_ObjectTrack = IcePy.defineClass('::Vistek::Perf::ObjectTrack', ObjectTrack, -1, (), False, False, None, (), (('ClassName', (), IcePy._t_string, False, 0),))
    ObjectTrack._ice_type = _M_Vistek.Perf._t_ObjectTrack

    _M_Vistek.Perf.ObjectTrack = ObjectTrack
    del ObjectTrack

    _M_Vistek.Perf.ObjectTrackPrx = ObjectTrackPrx
    del ObjectTrackPrx

if 'ClientInfo' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.ClientInfo = Ice.createTempClass()
    class ClientInfo(_M_Vistek.Perf.ObjectTrack):
        def __init__(self, ClassName='', IP='', port=0, UpRate=0):
            _M_Vistek.Perf.ObjectTrack.__init__(self, ClassName)
            self.IP = IP
            self.port = port
            self.UpRate = UpRate

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::ClientInfo', '::Vistek::Perf::ObjectTrack')

        def ice_id(self, current=None):
            return '::Vistek::Perf::ClientInfo'

        def ice_staticId():
            return '::Vistek::Perf::ClientInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_ClientInfo)

        __repr__ = __str__

    _M_Vistek.Perf.ClientInfoPrx = Ice.createTempClass()
    class ClientInfoPrx(_M_Vistek.Perf.ObjectTrackPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.ClientInfoPrx.ice_checkedCast(proxy, '::Vistek::Perf::ClientInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.ClientInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::ClientInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_ClientInfoPrx = IcePy.defineProxy('::Vistek::Perf::ClientInfo', ClientInfoPrx)

    _M_Vistek.Perf._t_ClientInfo = IcePy.defineClass('::Vistek::Perf::ClientInfo', ClientInfo, -1, (), False, False, _M_Vistek.Perf._t_ObjectTrack, (), (
        ('IP', (), IcePy._t_string, False, 0),
        ('port', (), IcePy._t_int, False, 0),
        ('UpRate', (), IcePy._t_float, True, 1)
    ))
    ClientInfo._ice_type = _M_Vistek.Perf._t_ClientInfo

    _M_Vistek.Perf.ClientInfo = ClientInfo
    del ClientInfo

    _M_Vistek.Perf.ClientInfoPrx = ClientInfoPrx
    del ClientInfoPrx

if '_t_ClientInfoList' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf._t_ClientInfoList = IcePy.defineSequence('::Vistek::Perf::ClientInfoList', (), _M_Vistek.Perf._t_ClientInfo)

if 'PipelineInfo' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.PipelineInfo = Ice.createTempClass()
    class PipelineInfo(_M_Vistek.Perf.ObjectTrack):
        def __init__(self, ClassName='', uri='', DownRate=0):
            _M_Vistek.Perf.ObjectTrack.__init__(self, ClassName)
            self.uri = uri
            self.DownRate = DownRate

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::ObjectTrack', '::Vistek::Perf::PipelineInfo')

        def ice_id(self, current=None):
            return '::Vistek::Perf::PipelineInfo'

        def ice_staticId():
            return '::Vistek::Perf::PipelineInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_PipelineInfo)

        __repr__ = __str__

    _M_Vistek.Perf.PipelineInfoPrx = Ice.createTempClass()
    class PipelineInfoPrx(_M_Vistek.Perf.ObjectTrackPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.PipelineInfoPrx.ice_checkedCast(proxy, '::Vistek::Perf::PipelineInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.PipelineInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::PipelineInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_PipelineInfoPrx = IcePy.defineProxy('::Vistek::Perf::PipelineInfo', PipelineInfoPrx)

    _M_Vistek.Perf._t_PipelineInfo = IcePy.defineClass('::Vistek::Perf::PipelineInfo', PipelineInfo, -1, (), False, False, _M_Vistek.Perf._t_ObjectTrack, (), (
        ('uri', (), IcePy._t_string, False, 0),
        ('DownRate', (), IcePy._t_float, True, 1)
    ))
    PipelineInfo._ice_type = _M_Vistek.Perf._t_PipelineInfo

    _M_Vistek.Perf.PipelineInfo = PipelineInfo
    del PipelineInfo

    _M_Vistek.Perf.PipelineInfoPrx = PipelineInfoPrx
    del PipelineInfoPrx

if '_t_PipelineInfoList' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf._t_PipelineInfoList = IcePy.defineSequence('::Vistek::Perf::PipelineInfoList', (), _M_Vistek.Perf._t_PipelineInfo)

if 'ServicePerf' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.ServicePerf = Ice.createTempClass()
    class ServicePerf(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Perf.ServicePerf:
                raise RuntimeError('Vistek.Perf.ServicePerf is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::ServicePerf')

        def ice_id(self, current=None):
            return '::Vistek::Perf::ServicePerf'

        def ice_staticId():
            return '::Vistek::Perf::ServicePerf'
        ice_staticId = staticmethod(ice_staticId)

        def GetSumRate(self, rst, current=None):
            pass

        def GetTimestampTicks(self, current=None):
            pass

        def GetAllClients(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_ServicePerf)

        __repr__ = __str__

    _M_Vistek.Perf.ServicePerfPrx = Ice.createTempClass()
    class ServicePerfPrx(Ice.ObjectPrx):

        def GetSumRate(self, rst, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetSumRate.invoke(self, ((rst, ), _ctx))

        def begin_GetSumRate(self, rst, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetSumRate.begin(self, ((rst, ), _response, _ex, _sent, _ctx))

        def end_GetSumRate(self, _r):
            return _M_Vistek.Perf.ServicePerf._op_GetSumRate.end(self, _r)

        def GetTimestampTicks(self, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetTimestampTicks.invoke(self, ((), _ctx))

        def begin_GetTimestampTicks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetTimestampTicks.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetTimestampTicks(self, _r):
            return _M_Vistek.Perf.ServicePerf._op_GetTimestampTicks.end(self, _r)

        def GetAllClients(self, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetAllClients.invoke(self, ((), _ctx))

        def begin_GetAllClients(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Perf.ServicePerf._op_GetAllClients.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllClients(self, _r):
            return _M_Vistek.Perf.ServicePerf._op_GetAllClients.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.ServicePerfPrx.ice_checkedCast(proxy, '::Vistek::Perf::ServicePerf', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.ServicePerfPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::ServicePerf'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_ServicePerfPrx = IcePy.defineProxy('::Vistek::Perf::ServicePerf', ServicePerfPrx)

    _M_Vistek.Perf._t_ServicePerf = IcePy.defineClass('::Vistek::Perf::ServicePerf', ServicePerf, -1, (), True, False, None, (), ())
    ServicePerf._ice_type = _M_Vistek.Perf._t_ServicePerf

    ServicePerf._op_GetSumRate = IcePy.Operation('GetSumRate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Perf._t_ResponseStringType, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    ServicePerf._op_GetTimestampTicks = IcePy.Operation('GetTimestampTicks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())
    ServicePerf._op_GetAllClients = IcePy.Operation('GetAllClients', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Perf._t_ClientInfoList, False, 0), ())

    _M_Vistek.Perf.ServicePerf = ServicePerf
    del ServicePerf

    _M_Vistek.Perf.ServicePerfPrx = ServicePerfPrx
    del ServicePerfPrx

if 'MediaServicePerf' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.MediaServicePerf = Ice.createTempClass()
    class MediaServicePerf(_M_Vistek.Perf.ServicePerf):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Perf.MediaServicePerf:
                raise RuntimeError('Vistek.Perf.MediaServicePerf is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::MediaServicePerf', '::Vistek::Perf::ServicePerf')

        def ice_id(self, current=None):
            return '::Vistek::Perf::MediaServicePerf'

        def ice_staticId():
            return '::Vistek::Perf::MediaServicePerf'
        ice_staticId = staticmethod(ice_staticId)

        def GetAllPipelines(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_MediaServicePerf)

        __repr__ = __str__

    _M_Vistek.Perf.MediaServicePerfPrx = Ice.createTempClass()
    class MediaServicePerfPrx(_M_Vistek.Perf.ServicePerfPrx):

        def GetAllPipelines(self, _ctx=None):
            return _M_Vistek.Perf.MediaServicePerf._op_GetAllPipelines.invoke(self, ((), _ctx))

        def begin_GetAllPipelines(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Perf.MediaServicePerf._op_GetAllPipelines.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllPipelines(self, _r):
            return _M_Vistek.Perf.MediaServicePerf._op_GetAllPipelines.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.MediaServicePerfPrx.ice_checkedCast(proxy, '::Vistek::Perf::MediaServicePerf', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.MediaServicePerfPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::MediaServicePerf'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_MediaServicePerfPrx = IcePy.defineProxy('::Vistek::Perf::MediaServicePerf', MediaServicePerfPrx)

    _M_Vistek.Perf._t_MediaServicePerf = IcePy.defineClass('::Vistek::Perf::MediaServicePerf', MediaServicePerf, -1, (), True, False, None, (_M_Vistek.Perf._t_ServicePerf,), ())
    MediaServicePerf._ice_type = _M_Vistek.Perf._t_MediaServicePerf

    MediaServicePerf._op_GetAllPipelines = IcePy.Operation('GetAllPipelines', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Perf._t_PipelineInfoList, False, 0), ())

    _M_Vistek.Perf.MediaServicePerf = MediaServicePerf
    del MediaServicePerf

    _M_Vistek.Perf.MediaServicePerfPrx = MediaServicePerfPrx
    del MediaServicePerfPrx

if 'DeviceServicePerf' not in _M_Vistek.Perf.__dict__:
    _M_Vistek.Perf.DeviceServicePerf = Ice.createTempClass()
    class DeviceServicePerf(_M_Vistek.Perf.ServicePerf):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Perf.DeviceServicePerf:
                raise RuntimeError('Vistek.Perf.DeviceServicePerf is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Perf::DeviceServicePerf', '::Vistek::Perf::ServicePerf')

        def ice_id(self, current=None):
            return '::Vistek::Perf::DeviceServicePerf'

        def ice_staticId():
            return '::Vistek::Perf::DeviceServicePerf'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Perf._t_DeviceServicePerf)

        __repr__ = __str__

    _M_Vistek.Perf.DeviceServicePerfPrx = Ice.createTempClass()
    class DeviceServicePerfPrx(_M_Vistek.Perf.ServicePerfPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Perf.DeviceServicePerfPrx.ice_checkedCast(proxy, '::Vistek::Perf::DeviceServicePerf', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Perf.DeviceServicePerfPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Perf::DeviceServicePerf'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Perf._t_DeviceServicePerfPrx = IcePy.defineProxy('::Vistek::Perf::DeviceServicePerf', DeviceServicePerfPrx)

    _M_Vistek.Perf._t_DeviceServicePerf = IcePy.defineClass('::Vistek::Perf::DeviceServicePerf', DeviceServicePerf, -1, (), True, False, None, (_M_Vistek.Perf._t_ServicePerf,), ())
    DeviceServicePerf._ice_type = _M_Vistek.Perf._t_DeviceServicePerf

    _M_Vistek.Perf.DeviceServicePerf = DeviceServicePerf
    del DeviceServicePerf

    _M_Vistek.Perf.DeviceServicePerfPrx = DeviceServicePerfPrx
    del DeviceServicePerfPrx

# End of module Vistek.Perf

__name__ = 'Vistek'

# End of module Vistek
